type Note = record {
    id: text;
    owner: principal;
    encrypted_content: blob;
    created_at: nat64;
    updated_at: nat64;
    public_key: blob;
};

type CreateNotePayload = record {
    encrypted_content: blob;
    public_key: blob;
};

type UpdateNotePayload = record {
    id: text;
    encrypted_content: blob;
};

type Result = variant {
    Ok: Note;
    Err: text;
};

type ListResult = variant {
    Ok: vec Note;
    Err: text;
};

service : {
    // Create a new encrypted note
    create_note: (CreateNotePayload) -> (Result);

    // Update an existing note
    update_note: (UpdateNotePayload) -> (Result);

    // Delete a note
    delete_note: (text) -> (bool);

    // Get a specific note by ID
    get_note: (text) -> (opt Note) query;

    // Get all notes owned by the caller
    get_my_notes: () -> (ListResult) query;

    // Get the total number of notes owned by the caller
    get_note_count: () -> (nat64) query;
}
