type ProposalAction = record {
    scope: text;
    params: ProposalParams;
};

type ProposalParams = record {
    receiver_id: opt text;
    method_name: opt text;
    args: opt text;
    amount: opt text;
    deposit: opt text;
};

type Proposal = record {
    id: text;
    author: text;
    actions: vec ProposalAction;
    approvals: vec text;
    min_approvals: nat32;
};

type Note = record {
    id: text;
    owner: text;
    encrypted_content: vec nat8;
    shared_with: vec text;
    created_at: nat64;
    updated_at: nat64;
};

type SharedKey = record {
    note_id: text;
    recipient: text;
    encrypted_key: vec nat8;
};

type Error = variant {
    NotFound;
    NotAuthorized;
    AlreadyExists;
};

type Result = variant {
    Ok;
    Err: Error;
};

type ResultNote = variant {
    Ok: Note;
    Err: Error;
};

type ResultNotes = variant {
    Ok: vec Note;
    Err: Error;
};

type ResultOptBytes = variant {
    Ok: opt vec nat8;
    Err: Error;
};

service : {
    get_proposal: (text) -> (Proposal) query;
    create_proposal: (ProposalAction) -> (text);
    approve_proposal: (text) -> ();
    execute_proposal: (text) -> ();
    share_note: (text, text, vec nat8) -> (Result);
    get_shared_context: (text) -> (vec text) query;

    // Note management
    create_note: (text, vec nat8) -> (Result);
    update_note: (text, vec nat8) -> (Result);
    get_note: (text) -> (ResultNote) query;
    list_notes: () -> (ResultNotes) query;

    // Note sharing
    get_shared_key: (text) -> (ResultOptBytes) query;
}
